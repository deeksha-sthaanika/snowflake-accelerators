#!/usr/bin/env python
# coding: utf-8
import streamlit as st
import os

DB_NAME=st.secrets.sf_db_schema["DB_NAME"]
SCHEMA_NAME=st.secrets.sf_db_schema["SCHEMA_NAME"]

# DB_NAME="SNDBX_DEMO_DB"
# SCHEMA_NAME="DEMO_WORK_INTERIM"

WAREHOUSE="SHOW WAREHOUSES"
ROLE="SHOW GRANTS"
TABLE="SHOW TABLES IN ACCOUNT"
DATABASE="SHOW DATABASES"
SCHEMA="SHOW SCHEMAS"
STAGE="SHOW STAGES"
TASK="SHOW TASKS"

PARENT_TASK="SHOW TASKS ROOT ONLY"

USE_WAREHOUSE="USE WAREHOUSE {arg2}"
USE_ROLE="USE ROLE {arg2}"
USE_DATABASE="USE DATABASE "+DB_NAME
USE_SCHEMA_NAME="USE SCHEMA "+SCHEMA_NAME
USE_DATABASE_PROF="USE DATABASE {arg2}"
USE_SCHEMA_NAME_PROF="USE SCHEMA {arg2}"
EXECUTE_TASK="EXECUTE TASK {arg2}"
RESUME_TASK="ALTER TASK {arg2} RESUME"

BATCH_ID_SEQ="SELECT BATCH_ID_SQ.NEXTVAL"

# CREATE_TASK="""CREATE TASK {arg2} WAREHOUSE={arg3} AS CALL 
# SP_JOB_SCRIPT('"""+DB_NAME+"."+SCHEMA_NAME+""".JOB_SCRIPTS{arg1}','{arg4}',{arg5},'"""+DB_NAME+"."+SCHEMA_NAME+""".JOB_SCRIPTS_AUDIT_TABLE')"""

CREATE_PARENT_TASK="""CREATE TASK {arg2} SCHEDULE='{arg3}' AS {arg4}"""
CREATE_CHILD_TASK="""CREATE TASK {arg2} AFTER {arg3} AS {arg4}"""

PUT_FILE="PUT file://{arg2} @"+DB_NAME+"."+SCHEMA_NAME+".{arg3} OVERWRITE = TRUE"

SCRIPT_NAME = "SELECT *  FROM "+DB_NAME+"."+SCHEMA_NAME+".JOB_SCRIPTS{arg1} ORDER BY SCRIPT_NAME,SEQ_ID"

SEQ_ID = "SELECT  JOB_ID,SEQ_ID AS SEQ_ID FROM "+DB_NAME+"."+SCHEMA_NAME+".JOB_SCRIPTS{arg1} WHERE SCRIPT_NAME='{arg2}' ORDER BY SEQ_ID"

STORED_PROC="""CALL  SP_JOB_SCRIPT_TEST('"""+DB_NAME+"."+SCHEMA_NAME+""".JOB_SCRIPTS{arg1}', 
'{arg2}', '"""+DB_NAME+"."+SCHEMA_NAME+""".JOB_SCRIPTS_AUDIT_TABLE','{arg3}','{arg4}','{arg5}') 
"""

STORED_PROC_RUN_ID="""CALL  SP_JOB_SCRIPT('"""+DB_NAME+"."+SCHEMA_NAME+""".JOB_SCRIPTS{arg1}', 
'{arg2}',{arg3}, '"""+DB_NAME+"."+SCHEMA_NAME+""".JOB_SCRIPTS_AUDIT_TABLE','{arg4}')
"""

STORED_PROC_RUN_ID_ARR="""CALL  SP_JOB_SCRIPT('"""+DB_NAME+"."+SCHEMA_NAME+""".JOB_SCRIPTS{arg1}', 
'{arg2}',{arg3}, '"""+DB_NAME+"."+SCHEMA_NAME+""".JOB_SCRIPTS_AUDIT_TABLE','{arg4}')"""

STORED_PROC_RUN_ID_TASK="""CALL  SP_JOB_SCRIPT_TASK('"""+DB_NAME+"."+SCHEMA_NAME+""".JOB_SCRIPTS{arg1}', 
'{arg2}',{arg3}, '"""+DB_NAME+"."+SCHEMA_NAME+""".JOB_SCRIPTS_AUDIT_TABLE')"""

AUDIT_LOGS="""SELECT * FROM """+DB_NAME+"."+SCHEMA_NAME+"""."JOB_SCRIPTS_AUDIT_TABLE"
WHERE SCRIPT_NAME = {arg2} ORDER BY START_TIME DESC"""

INSERT_JOB_SCRIPT="""INSERT INTO """+DB_NAME+"."+SCHEMA_NAME+""".JOB_SCRIPTS{arg1}({arg2}) VALUES({arg3})"""

UPDATE_JOB_SCRIPT="UPDATE "+DB_NAME+"."+SCHEMA_NAME+".JOB_SCRIPTS{arg1} SET {arg2} WHERE {arg3}"

DELETE_JOB_SCRIPT="DELETE FROM "+DB_NAME+"."+SCHEMA_NAME+".JOB_SCRIPTS{arg1} WHERE {arg2}"

STAGE_NAME = "SHOW STAGES IN ACCOUNT"

STAGE_FILES = "LIST '@{arg2}'"

PATH=os.getcwd()
GET_STAGE_FILE ="GET @{arg2} file://"+PATH

TASK_HISTORY="""SELECT NAME, DATABASE_NAME,  SCHEMA_NAME, date_trunc( 'second', CONVERT_TIMEZONE( {arg2}, SCHEDULED_TIME) ) as SCHEDULED_TIME,
             STATE, date_trunc( 'second', CONVERT_TIMEZONE({arg2}, QUERY_START_TIME) ) as START_TIME, 
             date_trunc( 'second', CONVERT_TIMEZONE({arg2}, COMPLETED_TIME) ) as END_TIME, 
             TIMESTAMPDIFF('millisecond', QUERY_START_TIME, COMPLETED_TIME) as DURATION, ERROR_CODE, ERROR_MESSAGE, QUERY_ID, 
            NEXT_SCHEDULED_TIME, SCHEDULED_FROM FROM TABLE(SNOWFLAKE.INFORMATION_SCHEMA.TASK_HISTORY()) ORDER BY SCHEDULED_TIME DESC """
LONG_TASK="""select DATEDIFF(seconds, QUERY_START_TIME,COMPLETED_TIME) as DURATION_SECONDS
                ,*
from snowflake.account_usage.task_history
WHERE STATE = 'SUCCEEDED'
and query_start_time >= DATEADD (day, -7, CURRENT_TIMESTAMP())
order by DURATION_SECONDS desc"""

SAMPLE="select * from {arg2} sample({arg3})"

PROFILE_COMP="""CALL  SNDBX_DEMO_DB.DEMO_WORK_INTERIM.profiling_data_with_pandas('{arg2}', '{arg3}',{arg4},{arg5},{arg6},{arg7},'{arg8}')"""

PROFILE_SINGLE="""CALL  SNDBX_DEMO_DB.DEMO_WORK_INTERIM.profiling_data_with_pandas('{arg2}','{arg3}',{arg4},{arg5},{arg6},{arg7})"""

COLUMNS="""SELECT COLUMN_NAME FROM {arg2}.INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA='{arg3}' AND TABLE_NAME='{arg4}'"""

DAG="""SELECT PARENT,substr(F.VALUE::VARCHAR,(regexp_instr(F.VALUE::VARCHAR,'\\\.',1,2)+1)) CHILD 
FROM (select NAME PARENT,PREDECESSORS CHILD from table(SNDBX_DEMO_DB.information_schema.task_dependents(task_name => '{arg2}', recursive => TRUE)) )MAIN,TABLE(FLATTEN(MAIN.CHILD))F"""

#PROMO_INSERT="INSERT INTO "+DB_NAME+"."+SCHEMA_NAME+".JOB_SCRIPTS_{arg2}(SCRIPT_NAME,JOB_ID,SEQ_ID,SQL_COMMAND,CONTINUE_ON_ERROR,IGNORE_SCRIPT) SELECT SCRIPT_NAME,JOB_ID,SEQ_ID,SQL_COMMAND,CONTINUE_ON_ERROR,IGNORE_SCRIPT FROM JOB_SCRIPTS{arg1} where script_name='{arg3}'"

PROMO_INSERT="""MERGE INTO """+DB_NAME+"""."""+SCHEMA_NAME+""".JOB_SCRIPTS_{arg2} AS TGT
USING 
(SELECT * FROM JOB_SCRIPTS{arg1} where script_name='{arg3}') AS SRC 
ON SRC.SCRIPT_NAME=TGT.SCRIPT_NAME AND SRC.SEQ_ID=TGT.SEQ_ID
WHEN NOT MATCHED THEN
INSERT (TGT.JOB_ID,TGT.SCRIPT_NAME,TGT.SEQ_ID,TGT.SQL_COMMAND,TGT.CONTINUE_ON_ERROR,TGT.IGNORE_SCRIPT) 
VALUES(SRC.JOB_ID,SRC.SCRIPT_NAME,SRC.SEQ_ID,SRC.SQL_COMMAND,SRC.CONTINUE_ON_ERROR,SRC.IGNORE_SCRIPT)
WHEN MATCHED THEN
UPDATE SET TGT.JOB_ID=SRC.JOB_ID,TGT.SCRIPT_NAME=SRC.SCRIPT_NAME,TGT.SEQ_ID=SRC.SEQ_ID,TGT.SQL_COMMAND=SRC.SQL_COMMAND,
TGT.CONTINUE_ON_ERROR=SRC.CONTINUE_ON_ERROR,TGT.IGNORE_SCRIPT=SRC.IGNORE_SCRIPT"""

# """MERGE INTO JOB_SCRIPTS{arg1} AS TGT
#                 #                         USING 
#                 #                         (SELECT 1 AS JOB_ID, '"""+script_name[0]+"""' AS SCRIPT_NAME,5 AS RUN_ID,'@my_int_stage/"""+uploaded_file.name+""".gz' AS SQL_COMMAND,'FALSE' AS CONTINUE_ON_ERROR,'N' AS IGNORE_SCRIPT) AS SRC 
#                 #                         ON SRC.SCRIPT_NAME=TGT.SCRIPT_NAME
#                 #                         WHEN NOT MATCHED THEN
#                 #                         INSERT (TGT.JOB_ID,TGT.SCRIPT_NAME,TGT.RUN_ID,TGT.SQL_COMMAND,TGT.CONTINUE_ON_ERROR,TGT.IGNORE_SCRIPT) 
#                 #                         VALUES(SRC.JOB_ID,SRC.SCRIPT_NAME,SRC.RUN_ID,SRC.SQL_COMMAND,SRC.CONTINUE_ON_ERROR,SRC.IGNORE_SCRIPT)"""